{
  "contractName": "PullPayment",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "payee",
          "type": "address"
        }
      ],
      "name": "withdrawPayments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dest",
          "type": "address"
        }
      ],
      "name": "payments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Simple implementation of a https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment] strategy, where the paying contract doesn't interact directly with the receiver account, which must withdraw its payments itself. * Pull-payments are often considered the best practice when it comes to sending Ether, security-wise. It prevents recipients from blocking execution, and eliminates reentrancy concerns. * TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]. * To use, derive from the `PullPayment` contract, and use {_asyncTransfer} instead of Solidity's `transfer` function. Payees can query their due payments with {payments}, and retrieve them with {withdrawPayments}.\",\"methods\":{\"payments(address)\":{\"details\":\"Returns the payments owed to an address.\",\"params\":{\"dest\":\"The creditor's address.\"}},\"withdrawPayments(address)\":{\"details\":\"Withdraw accumulated payments, forwarding all gas to the recipient.     * Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}.     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.\",\"params\":{\"payee\":\"Whose payments will be withdrawn.\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/aaa/SYNCToken/CBOND-CONTRACT/contracts/openzeppelin/payment/PullPayment.sol\":\"PullPayment\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/aaa/SYNCToken/CBOND-CONTRACT/contracts/openzeppelin/GSN/Context.sol\":{\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"urls\":[\"bzz-raw://840b14ce0315c47d49ba328f1f9fa7654ded1c9e1559e6c5e777a7b2dc28bf0a\",\"dweb:/ipfs/QmTLLabn4wcfGro9LEmUXUN2nwKqZSotXMvjDCLXEnLtZP\"]},\"/home/aaa/SYNCToken/CBOND-CONTRACT/contracts/openzeppelin/access/Ownable.sol\":{\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"urls\":[\"bzz-raw://8f9f711fb8d0d92aeea1c327e3845d13ca1fa8f142e47f8723cd5b3106fb29a3\",\"dweb:/ipfs/QmVQUReDW9f4zGqhizwHnyU8EntMs95tbASdqkGncnikba\"]},\"/home/aaa/SYNCToken/CBOND-CONTRACT/contracts/openzeppelin/math/SafeMath.sol\":{\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"urls\":[\"bzz-raw://2df142592d1dc267d9549049ee3317fa190d2f87eaa565f86ab05ec83f7ab8f5\",\"dweb:/ipfs/QmSkJtcfWo7c42KnL5hho6GFxK6HRNV91XABx1P7xDtfLV\"]},\"/home/aaa/SYNCToken/CBOND-CONTRACT/contracts/openzeppelin/payment/PullPayment.sol\":{\"keccak256\":\"0xf5c2618e4347c6e345d069c67240ec07ac1fb419dfc54bc6a25fecc33bee3ece\",\"urls\":[\"bzz-raw://f14147ce8bdf3c93d21231f740444cafcc8ea7c59e76ff2c8dad974e4b520037\",\"dweb:/ipfs/QmRgNNSbwzCDxfdyWx5gC4bsacc1xtdVuzhn6dj9fj72yp\"]},\"/home/aaa/SYNCToken/CBOND-CONTRACT/contracts/openzeppelin/payment/escrow/Escrow.sol\":{\"keccak256\":\"0xcb0d72d446c3a90bd38ec5cfedcb7c11d6af0e2b545abb9939b5293f9dfab372\",\"urls\":[\"bzz-raw://5a4fa4094639dff593d07162d7d0196abae8db602b8b5c2754bca0694f678fd5\",\"dweb:/ipfs/QmfHMiapKeHWTL1kQmmWt4XhzHbF8DtZuhHqdQpjTQpMnA\"]},\"/home/aaa/SYNCToken/CBOND-CONTRACT/contracts/openzeppelin/utils/Address.sol\":{\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\",\"urls\":[\"bzz-raw://774e78a9ff32792cc95db4d2ceaf3a7965bb7f0bea5e6cb7cff182b450d44b37\",\"dweb:/ipfs/QmRRMC4uj7eAcLW7chynA3sNEYULMFazdLwQHKHQPyzAbA\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\nimport \"./escrow/Escrow.sol\";\n\n/**\n * @dev Simple implementation of a\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\n * strategy, where the paying contract doesn't interact directly with the\n * receiver account, which must withdraw its payments itself.\n *\n * Pull-payments are often considered the best practice when it comes to sending\n * Ether, security-wise. It prevents recipients from blocking execution, and\n * eliminates reentrancy concerns.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n *\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\n * instead of Solidity's `transfer` function. Payees can query their due\n * payments with {payments}, and retrieve them with {withdrawPayments}.\n */\ncontract PullPayment {\n    Escrow private _escrow;\n\n    constructor () internal {\n        _escrow = new Escrow();\n    }\n\n    /**\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\n     *\n     * Note that _any_ account can call this function, not just the `payee`.\n     * This means that contracts unaware of the `PullPayment` protocol can still\n     * receive funds this way, by having a separate account call\n     * {withdrawPayments}.\n     *\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n     * Make sure you trust the recipient, or are either following the\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n     *\n     * @param payee Whose payments will be withdrawn.\n     */\n    function withdrawPayments(address payable payee) public virtual {\n        _escrow.withdraw(payee);\n    }\n\n    /**\n     * @dev Returns the payments owed to an address.\n     * @param dest The creditor's address.\n     */\n    function payments(address dest) public view returns (uint256) {\n        return _escrow.depositsOf(dest);\n    }\n\n    /**\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\n     * there is no danger of them being spent before withdrawal.\n     *\n     * @param dest The destination address of the funds.\n     * @param amount The amount to transfer.\n     */\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\n        _escrow.deposit{ value: amount }(dest);\n    }\n}\n",
  "sourcePath": "/home/aaa/SYNCToken/CBOND-CONTRACT/contracts/openzeppelin/payment/PullPayment.sol",
  "ast": {
    "absolutePath": "/home/aaa/SYNCToken/CBOND-CONTRACT/contracts/openzeppelin/payment/PullPayment.sol",
    "exportedSymbols": {
      "PullPayment": [
        11641
      ]
    },
    "id": 11642,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 11582,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:85"
      },
      {
        "absolutePath": "/home/aaa/SYNCToken/CBOND-CONTRACT/contracts/openzeppelin/payment/escrow/Escrow.sol",
        "file": "./escrow/Escrow.sol",
        "id": 11583,
        "nodeType": "ImportDirective",
        "scope": 11642,
        "sourceUnit": 11782,
        "src": "58:29:85",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [
          11781
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 11584,
          "nodeType": "StructuredDocumentation",
          "src": "89:949:85",
          "text": "@dev Simple implementation of a\nhttps://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\nstrategy, where the paying contract doesn't interact directly with the\nreceiver account, which must withdraw its payments itself.\n * Pull-payments are often considered the best practice when it comes to sending\nEther, security-wise. It prevents recipients from blocking execution, and\neliminates reentrancy concerns.\n * TIP: If you would like to learn more about reentrancy and alternative ways\nto protect against it, check out our blog post\nhttps://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\ninstead of Solidity's `transfer` function. Payees can query their due\npayments with {payments}, and retrieve them with {withdrawPayments}."
        },
        "fullyImplemented": true,
        "id": 11641,
        "linearizedBaseContracts": [
          11641
        ],
        "name": "PullPayment",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 11586,
            "mutability": "mutable",
            "name": "_escrow",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 11641,
            "src": "1066:22:85",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Escrow_$11781",
              "typeString": "contract Escrow"
            },
            "typeName": {
              "contractScope": null,
              "id": 11585,
              "name": "Escrow",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 11781,
              "src": "1066:6:85",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Escrow_$11781",
                "typeString": "contract Escrow"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "body": {
              "id": 11595,
              "nodeType": "Block",
              "src": "1119:39:85",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 11593,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 11589,
                      "name": "_escrow",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11586,
                      "src": "1129:7:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Escrow_$11781",
                        "typeString": "contract Escrow"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 11591,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "1139:10:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_Escrow_$11781_$",
                          "typeString": "function () returns (contract Escrow)"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 11590,
                          "name": "Escrow",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 11781,
                          "src": "1143:6:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Escrow_$11781",
                            "typeString": "contract Escrow"
                          }
                        }
                      },
                      "id": 11592,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1139:12:85",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Escrow_$11781",
                        "typeString": "contract Escrow"
                      }
                    },
                    "src": "1129:22:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Escrow_$11781",
                      "typeString": "contract Escrow"
                    }
                  },
                  "id": 11594,
                  "nodeType": "ExpressionStatement",
                  "src": "1129:22:85"
                }
              ]
            },
            "documentation": null,
            "id": 11596,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 11587,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1107:2:85"
            },
            "returnParameters": {
              "id": 11588,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1119:0:85"
            },
            "scope": 11641,
            "src": "1095:63:85",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 11608,
              "nodeType": "Block",
              "src": "1871:40:85",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 11605,
                        "name": "payee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11599,
                        "src": "1898:5:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 11602,
                        "name": "_escrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11586,
                        "src": "1881:7:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Escrow_$11781",
                          "typeString": "contract Escrow"
                        }
                      },
                      "id": 11604,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "withdraw",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11780,
                      "src": "1881:16:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_payable_$returns$__$",
                        "typeString": "function (address payable) external"
                      }
                    },
                    "id": 11606,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1881:23:85",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11607,
                  "nodeType": "ExpressionStatement",
                  "src": "1881:23:85"
                }
              ]
            },
            "documentation": {
              "id": 11597,
              "nodeType": "StructuredDocumentation",
              "src": "1164:638:85",
              "text": "@dev Withdraw accumulated payments, forwarding all gas to the recipient.\n     * Note that _any_ account can call this function, not just the `payee`.\nThis means that contracts unaware of the `PullPayment` protocol can still\nreceive funds this way, by having a separate account call\n{withdrawPayments}.\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\nMake sure you trust the recipient, or are either following the\nchecks-effects-interactions pattern or using {ReentrancyGuard}.\n     * @param payee Whose payments will be withdrawn."
            },
            "functionSelector": "31b3eb94",
            "id": 11609,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawPayments",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 11600,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11599,
                  "mutability": "mutable",
                  "name": "payee",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11609,
                  "src": "1833:21:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 11598,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1833:15:85",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1832:23:85"
            },
            "returnParameters": {
              "id": 11601,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1871:0:85"
            },
            "scope": 11641,
            "src": "1807:104:85",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 11622,
              "nodeType": "Block",
              "src": "2091:48:85",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 11619,
                        "name": "dest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11612,
                        "src": "2127:4:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 11617,
                        "name": "_escrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11586,
                        "src": "2108:7:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Escrow_$11781",
                          "typeString": "contract Escrow"
                        }
                      },
                      "id": 11618,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "depositsOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11718,
                      "src": "2108:18:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 11620,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2108:24:85",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 11616,
                  "id": 11621,
                  "nodeType": "Return",
                  "src": "2101:31:85"
                }
              ]
            },
            "documentation": {
              "id": 11610,
              "nodeType": "StructuredDocumentation",
              "src": "1917:107:85",
              "text": "@dev Returns the payments owed to an address.\n@param dest The creditor's address."
            },
            "functionSelector": "e2982c21",
            "id": 11623,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "payments",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 11613,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11612,
                  "mutability": "mutable",
                  "name": "dest",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11623,
                  "src": "2047:12:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11611,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2047:7:85",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2046:14:85"
            },
            "returnParameters": {
              "id": 11616,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11615,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11623,
                  "src": "2082:7:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11614,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2082:7:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2081:9:85"
            },
            "scope": 11641,
            "src": "2029:110:85",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 11639,
              "nodeType": "Block",
              "src": "2569:55:85",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 11636,
                        "name": "dest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11626,
                        "src": "2612:4:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 11631,
                          "name": "_escrow",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 11586,
                          "src": "2579:7:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Escrow_$11781",
                            "typeString": "contract Escrow"
                          }
                        },
                        "id": 11633,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "deposit",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 11748,
                        "src": "2579:15:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_payable$_t_address_$returns$__$",
                          "typeString": "function (address) payable external"
                        }
                      },
                      "id": 11635,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "argumentTypes": null,
                          "id": 11634,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 11628,
                          "src": "2603:6:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "src": "2579:32:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_payable$_t_address_$returns$__$value",
                        "typeString": "function (address) payable external"
                      }
                    },
                    "id": 11637,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2579:38:85",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11638,
                  "nodeType": "ExpressionStatement",
                  "src": "2579:38:85"
                }
              ]
            },
            "documentation": {
              "id": 11624,
              "nodeType": "StructuredDocumentation",
              "src": "2145:348:85",
              "text": "@dev Called by the payer to store the sent amount as credit to be pulled.\nFunds sent in this way are stored in an intermediate {Escrow} contract, so\nthere is no danger of them being spent before withdrawal.\n     * @param dest The destination address of the funds.\n@param amount The amount to transfer."
            },
            "id": 11640,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_asyncTransfer",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 11629,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11626,
                  "mutability": "mutable",
                  "name": "dest",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11640,
                  "src": "2522:12:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11625,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2522:7:85",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11628,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11640,
                  "src": "2536:14:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11627,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2536:7:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2521:30:85"
            },
            "returnParameters": {
              "id": 11630,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2569:0:85"
            },
            "scope": 11641,
            "src": "2498:126:85",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 11642,
        "src": "1039:1587:85"
      }
    ],
    "src": "33:2594:85"
  },
  "legacyAST": {
    "absolutePath": "/home/aaa/SYNCToken/CBOND-CONTRACT/contracts/openzeppelin/payment/PullPayment.sol",
    "exportedSymbols": {
      "PullPayment": [
        11641
      ]
    },
    "id": 11642,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 11582,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:85"
      },
      {
        "absolutePath": "/home/aaa/SYNCToken/CBOND-CONTRACT/contracts/openzeppelin/payment/escrow/Escrow.sol",
        "file": "./escrow/Escrow.sol",
        "id": 11583,
        "nodeType": "ImportDirective",
        "scope": 11642,
        "sourceUnit": 11782,
        "src": "58:29:85",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [
          11781
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 11584,
          "nodeType": "StructuredDocumentation",
          "src": "89:949:85",
          "text": "@dev Simple implementation of a\nhttps://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\nstrategy, where the paying contract doesn't interact directly with the\nreceiver account, which must withdraw its payments itself.\n * Pull-payments are often considered the best practice when it comes to sending\nEther, security-wise. It prevents recipients from blocking execution, and\neliminates reentrancy concerns.\n * TIP: If you would like to learn more about reentrancy and alternative ways\nto protect against it, check out our blog post\nhttps://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\ninstead of Solidity's `transfer` function. Payees can query their due\npayments with {payments}, and retrieve them with {withdrawPayments}."
        },
        "fullyImplemented": true,
        "id": 11641,
        "linearizedBaseContracts": [
          11641
        ],
        "name": "PullPayment",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 11586,
            "mutability": "mutable",
            "name": "_escrow",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 11641,
            "src": "1066:22:85",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Escrow_$11781",
              "typeString": "contract Escrow"
            },
            "typeName": {
              "contractScope": null,
              "id": 11585,
              "name": "Escrow",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 11781,
              "src": "1066:6:85",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Escrow_$11781",
                "typeString": "contract Escrow"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "body": {
              "id": 11595,
              "nodeType": "Block",
              "src": "1119:39:85",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 11593,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 11589,
                      "name": "_escrow",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11586,
                      "src": "1129:7:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Escrow_$11781",
                        "typeString": "contract Escrow"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 11591,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "1139:10:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_Escrow_$11781_$",
                          "typeString": "function () returns (contract Escrow)"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 11590,
                          "name": "Escrow",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 11781,
                          "src": "1143:6:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Escrow_$11781",
                            "typeString": "contract Escrow"
                          }
                        }
                      },
                      "id": 11592,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1139:12:85",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Escrow_$11781",
                        "typeString": "contract Escrow"
                      }
                    },
                    "src": "1129:22:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Escrow_$11781",
                      "typeString": "contract Escrow"
                    }
                  },
                  "id": 11594,
                  "nodeType": "ExpressionStatement",
                  "src": "1129:22:85"
                }
              ]
            },
            "documentation": null,
            "id": 11596,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 11587,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1107:2:85"
            },
            "returnParameters": {
              "id": 11588,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1119:0:85"
            },
            "scope": 11641,
            "src": "1095:63:85",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 11608,
              "nodeType": "Block",
              "src": "1871:40:85",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 11605,
                        "name": "payee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11599,
                        "src": "1898:5:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 11602,
                        "name": "_escrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11586,
                        "src": "1881:7:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Escrow_$11781",
                          "typeString": "contract Escrow"
                        }
                      },
                      "id": 11604,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "withdraw",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11780,
                      "src": "1881:16:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_payable_$returns$__$",
                        "typeString": "function (address payable) external"
                      }
                    },
                    "id": 11606,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1881:23:85",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11607,
                  "nodeType": "ExpressionStatement",
                  "src": "1881:23:85"
                }
              ]
            },
            "documentation": {
              "id": 11597,
              "nodeType": "StructuredDocumentation",
              "src": "1164:638:85",
              "text": "@dev Withdraw accumulated payments, forwarding all gas to the recipient.\n     * Note that _any_ account can call this function, not just the `payee`.\nThis means that contracts unaware of the `PullPayment` protocol can still\nreceive funds this way, by having a separate account call\n{withdrawPayments}.\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\nMake sure you trust the recipient, or are either following the\nchecks-effects-interactions pattern or using {ReentrancyGuard}.\n     * @param payee Whose payments will be withdrawn."
            },
            "functionSelector": "31b3eb94",
            "id": 11609,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawPayments",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 11600,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11599,
                  "mutability": "mutable",
                  "name": "payee",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11609,
                  "src": "1833:21:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 11598,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1833:15:85",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1832:23:85"
            },
            "returnParameters": {
              "id": 11601,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1871:0:85"
            },
            "scope": 11641,
            "src": "1807:104:85",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 11622,
              "nodeType": "Block",
              "src": "2091:48:85",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 11619,
                        "name": "dest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11612,
                        "src": "2127:4:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 11617,
                        "name": "_escrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11586,
                        "src": "2108:7:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Escrow_$11781",
                          "typeString": "contract Escrow"
                        }
                      },
                      "id": 11618,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "depositsOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11718,
                      "src": "2108:18:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 11620,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2108:24:85",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 11616,
                  "id": 11621,
                  "nodeType": "Return",
                  "src": "2101:31:85"
                }
              ]
            },
            "documentation": {
              "id": 11610,
              "nodeType": "StructuredDocumentation",
              "src": "1917:107:85",
              "text": "@dev Returns the payments owed to an address.\n@param dest The creditor's address."
            },
            "functionSelector": "e2982c21",
            "id": 11623,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "payments",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 11613,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11612,
                  "mutability": "mutable",
                  "name": "dest",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11623,
                  "src": "2047:12:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11611,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2047:7:85",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2046:14:85"
            },
            "returnParameters": {
              "id": 11616,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11615,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11623,
                  "src": "2082:7:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11614,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2082:7:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2081:9:85"
            },
            "scope": 11641,
            "src": "2029:110:85",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 11639,
              "nodeType": "Block",
              "src": "2569:55:85",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 11636,
                        "name": "dest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11626,
                        "src": "2612:4:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 11631,
                          "name": "_escrow",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 11586,
                          "src": "2579:7:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Escrow_$11781",
                            "typeString": "contract Escrow"
                          }
                        },
                        "id": 11633,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "deposit",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 11748,
                        "src": "2579:15:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_payable$_t_address_$returns$__$",
                          "typeString": "function (address) payable external"
                        }
                      },
                      "id": 11635,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "argumentTypes": null,
                          "id": 11634,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 11628,
                          "src": "2603:6:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "src": "2579:32:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_payable$_t_address_$returns$__$value",
                        "typeString": "function (address) payable external"
                      }
                    },
                    "id": 11637,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2579:38:85",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11638,
                  "nodeType": "ExpressionStatement",
                  "src": "2579:38:85"
                }
              ]
            },
            "documentation": {
              "id": 11624,
              "nodeType": "StructuredDocumentation",
              "src": "2145:348:85",
              "text": "@dev Called by the payer to store the sent amount as credit to be pulled.\nFunds sent in this way are stored in an intermediate {Escrow} contract, so\nthere is no danger of them being spent before withdrawal.\n     * @param dest The destination address of the funds.\n@param amount The amount to transfer."
            },
            "id": 11640,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_asyncTransfer",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 11629,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11626,
                  "mutability": "mutable",
                  "name": "dest",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11640,
                  "src": "2522:12:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11625,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2522:7:85",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11628,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11640,
                  "src": "2536:14:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11627,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2536:7:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2521:30:85"
            },
            "returnParameters": {
              "id": 11630,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2569:0:85"
            },
            "scope": 11641,
            "src": "2498:126:85",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 11642,
        "src": "1039:1587:85"
      }
    ],
    "src": "33:2594:85"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.6+commit.6c089d02.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.1.0",
  "updatedAt": "2020-10-08T19:13:25.087Z",
  "devdoc": {
    "details": "Simple implementation of a https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment] strategy, where the paying contract doesn't interact directly with the receiver account, which must withdraw its payments itself. * Pull-payments are often considered the best practice when it comes to sending Ether, security-wise. It prevents recipients from blocking execution, and eliminates reentrancy concerns. * TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]. * To use, derive from the `PullPayment` contract, and use {_asyncTransfer} instead of Solidity's `transfer` function. Payees can query their due payments with {payments}, and retrieve them with {withdrawPayments}.",
    "methods": {
      "payments(address)": {
        "details": "Returns the payments owed to an address.",
        "params": {
          "dest": "The creditor's address."
        }
      },
      "withdrawPayments(address)": {
        "details": "Withdraw accumulated payments, forwarding all gas to the recipient.     * Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}.     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.",
        "params": {
          "payee": "Whose payments will be withdrawn."
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}